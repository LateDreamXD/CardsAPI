import type {VercelRequest, VercelRequestQuery, VercelResponse} from '@vercel/node';
import moment from 'moment';
moment.locale('zh-cn');

import config from './config/default.json' with {type: 'json'};
const {socials, games, week, picOffset} = config;

// const baseUrl = config.devUrl;
const baseUrl = config.prodUrl;

const fetchImage = async(url: string) => {
	const res = await fetch(url);
	const base64 = Buffer.from(await res.arrayBuffer()).toString('base64');
	return `data:image/png;base64,${base64}`;
}

const parseStr = (str: string) => str.trim().replace(/{%amp%}/gm, '&amp;').replace(/{%lt%}/gm, '&lt;').replace(/{%gt%}/gm, '&gt;');

const genContact = async(params: VercelRequestQuery) => {
	let joined: string[] = []; let result = '';
	for(const key in params) {
		if(socials.includes(key) || games.includes(key))
			joined.push(key);
	}
	var margin = 40;
	var sp = (170 - margin) / joined.length;
	for(let i = 0; i < joined.length; i++) {
		const key = joined[i];
		result += `
			<g class="item">
				<image class="icon" transform="translate(350 ${margin + sp * i + sp / 2 - 16})" href="${await fetchImage(baseUrl +'res/icon/' + key + '.png')}"/>
				<text class="text" transform="translate(370 ${margin + 12 + sp * i + sp / 2 - 16})">${parseStr(params[key] as string)}</text>
			</g>`;
	}
	return result;
}

const getPic = async(index: number) => {
	return {
		img: await fetchImage(baseUrl + 'res/bg/' + index + '.png'),
		offset: picOffset[index]
	}
}

const getTodayText = (params: VercelRequestQuery) => {
	const date = params.date || `${moment().year()}-12-31`;
	const ret = -moment().diff(date, 'days');
	const text = params.date? (params.date_name || '某个特殊日期'): '跨年';
	const end = ret >= 0? '还有': '过去了';
	const count = ret >= 0? ret : -ret;
	return `距离${text}${end} ${count} 天`;
}

export default async function handler(req: VercelRequest, res: VercelResponse) {
	const params = req.query;
	const contact = await genContact(params);
	const {bgColor, textColor} = config;

	res.status(200).setHeader('Content-Type', 'image/svg+xml').setHeader('Access-Control-Allow-Origin', '*');
	res.setHeader('Cross-Origin-Resource-Policy', 'cross-origin');
	res.send(`
	<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 500 180">
	<defs>
		<style>
			svg {background-color: ${params.bg_color || bgColor}; font-family: system-ui, -apple-system, BlinkMacSystemFont, segoe ui, Roboto, Helvetica, Arial, sans-serif;}
			#image .line { fill: none; stroke: #000; opacity: .7; stroke-miterlimit: 10; stroke-width: 1.5px; stroke-linecap: round; }
			#image .pic { height: 250px; }
			#detail .text { font-size: 12px; fill: ${params.font_color || textColor}; font-weight: lighter; }
			#contact .item .icon { width: 16px; height: 16px; }
			#contact .item .text { font-size: 10px; fill: ${params.font_color || textColor}; font-weight: lighter; }
			#quote .text { font-size: 10px; fill: ${params.font_color || textColor}; font-weight: lighter; }
		</style>
	</defs>
	<title>Card generated by LateDream with ❤️</title>
	
	<g id="image">
		<line class="line" x1="250.5" y1="20" x2="250.5" y2="170"/>
		<image class="pic" transform="translate(${250 - (await getPic((params.pic as any) || 1)).offset} 32) scale(0.5)" href="${await (await getPic((params.pic as any) || 1)).img}"/>
	</g>
	
	<g id="detail">
		<text class="text" transform="translate(20 35)">🎉 欢迎! o(〃＾▽＾〃)o</text>
		<text class="text" transform="translate(20 65)">📆 今天是 ${moment().format('M')} 月 ${moment().format('D')} 日, ${week[moment().day() - 1]}</text>
		<text class="text" transform="translate(20 95)">🎈 也是 ${moment().year()} 年的第 ${moment().dayOfYear()} 天</text>
		<text class="text" transform="translate(20 125)">⏳ ${getTodayText(params)}</text>
		<text class="text" transform="translate(20 155)">✨ ${params.quote || '祝你度过美好的一天!'}</text>
	</g>
	
	<g id="contact">${contact}</g>
	</svg>`);
}